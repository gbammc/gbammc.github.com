<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | Alvin Zhu]]></title>
  <link href="http://gbammc.github.io/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://gbammc.github.io/"/>
  <updated>2014-08-26T12:13:05+08:00</updated>
  <id>http://gbammc.github.io/</id>
  <author>
    <name><![CDATA[Alvin Zhu]]></name>
    <email><![CDATA[gbammc@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[django + pip + virtualenv ＋ postgres]]></title>
    <link href="http://gbammc.github.io/blog/2014/04/22/django-101/"/>
    <updated>2014-04-22T23:40:58+08:00</updated>
    <id>http://gbammc.github.io/blog/2014/04/22/django-101</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>最近兴趣所致，想学习利用 Django 编写一个项目，无奈之前不太懂 python，在机子乱搞一通后发现系统的环境都被玩坏了，GoAgentX 都跑不了..不过经过一番折腾后总算是走上正轨，所以顺便总结一下吧。</p>

<!-- more -->


<h1>安装 python，pip 和 easy_install</h1>

<p>虽然 OS X 已经自带有多个版本的 python，不过还是推荐使用 homebrew 安装一个，因为 homebrew 还会自动帮我们安装 pip 和 easy_install 这两个包管理工具，更详细的关于 python 包管理工具资料请戳<a href="http://jiayanjujyj.iteye.com/blog/1409819">这里</a>：</p>

<p><code>
brew install python --universal --framework
</code></p>

<p>然后我们需要检查是否有 <code>/usr/local/share/python</code> 这个文件夹，如果不存在的话需要建立一个软链接，例如：</p>

<p><code>
ln -s /usr/local/Cellar/python/2.7.6/Frameworks/Python.framework/Versions/2.7/bin/ /usr/local/share/python
</code></p>

<p>上面的<code>2.7</code>是当前 python 的版本号，按需替换即可。</p>

<hr />

<h1>安装 virtualenv 和 virtualenvwrapper</h1>

<p>virtualenv <a href="http://virtualenv.org/">官网</a> 是这样描述自己的：</p>

<blockquote><p>virtualenv要解决的根本问题是库的版本和依赖，以及权限问题。假设你有一个程序，需要LibFoo的版本1，而另一个程序需要版本2，如何同时使用两个应用程序呢？如果将所有的库都安装在 /usr/lib/python2.7/site-packages（或者你的系统的标准包安装路径），非常容易出现将不该升级的库升级的问题。</p>

<p>另外，在一台共享的机器上，如果没有全局的 site-packages 目录的权限（例如一个共享的主机），如何安装Python库呢？</p>

<p>在这些情况下，就是该用到virtualenv的地方。它能够创建一个自己的安装目录，形成一个独立的环境，不会影响其他的virtualenv环境，甚至可以不受全局的site-packages当中安装的包的影响。</p></blockquote>

<p>通过为每个项目创建虚拟环境，在每个虚拟环境中安装需要的第三方包版本，那么不同的项目就可以独立的使用一个  django 环境。virtualenvwrapper 则为 virtualenv 提供了一些便利的命令行上的封装。</p>

<p>首先在我们的 .bashrc 或( .zshrc )加上:</p>

<p>```</p>

<h1>Before other PATHs&hellip;</h1>

<p>PATH=${PATH}:/usr/local/share/python</p>

<h1>Python</h1>

<p>export WORKON_HOME=$HOME/.virtualenvs
export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2.7
export VIRTUALENVWRAPPER_VIRTUALENV_ARGS=&lsquo;&mdash;no-site-packages&rsquo;
export PIP_VIRTUALENV_BASE=$WORKON_HOME
export PIP_RESPECT_VIRTUALENV=true
if [[ -r /usr/local/share/python/virtualenvwrapper.sh ]]; then</p>

<pre><code>source /usr/local/share/python/virtualenvwrapper.sh
</code></pre>

<p>else</p>

<pre><code>echo "WARNING: Can't find virtualenvwrapper.sh"
</code></pre>

<p>fi</p>

<h1></h1>

<p>```
然后安装：</p>

<p><code>
$ pip install virtualenv
$ pip install virtualenvwrapper
</code></p>

<p>virtualenvwrapper 的用法当然还是看<a href="http://virtualenvwrapper.readthedocs.org/en/latest/">文档</a>最靠谱啦。</p>

<hr />

<h1>安装 django</h1>

<p>主角来了，首先<code>cd</code>到项目创建目录下，然后用 virtualenv 为我们的项目创建一个虚拟环境：</p>

<p><code>
mkvirtualenv env1
</code></p>

<p>接着就是安装 django：</p>

<p><code>
pip install django
</code></p>

<p>Finished，这就完成啦，实在是太简单了 :]</p>

<hr />

<h1>带上 postgres</h1>

<p>最后，因为公司维护的要求，顺便就上 postgres了 (<a href="http://www.zhihu.com/question/20010554">PostgreSQL 与 MySQL 相比，优势何在？</a>) ，为了 django 能和 postgres 连接，先装<code>psycopg2</code>:</p>

<p><code>
pip install psycopg2
</code></p>

<p>然后就修改应用中的<code>settings.py</code>配置：</p>

<p>```
DATABASES = {</p>

<pre><code>'default': {
    'ENGINE': 'django.db.backends.postgresql_psycopg2', 
    'NAME': 'test',    
    'USER': 'user',                  # Not used with sqlite3.
    'PASSWORD': 'pwd',               # Not used with sqlite3.
    'HOST': '',                      # Set to empty string for localhost. Not used with sqlite3.
    'PORT': '5432',                  # Set to empty string for default. Not used with sqlite3.
}
</code></pre>

<p>```</p>

<p>最后同步一下项目的数据库：</p>

<p><code>
python manage.py syncdb
</code></p>
]]></content>
  </entry>
  
</feed>
